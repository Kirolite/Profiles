#  Quantumult 配置示例 2021-1-29 翻译整理
#
# 以 ";" 或 "#" 或 "//" 开头的行为注释行。
#
# SS-URI 计划详情可浏览 https://shadowsocks.org/en/spec/sip002-uri-scheme.html
#
# 使用 HEAD 方法发送 HTTP 请求到 server _ check _ url 来测试代理的状态，结果应该是两个延迟，第一个是 TCP 与代理服务器的握手，第二个是 Quantumult 成功地从 server _ check _ url 接收 HTTP 响应的总时间。闪电图标意味着 TCP 快速打开成功。如果区域[ server _ local ]或区域[ server _ remote ]中的服务器有自己的 server _ check _ url，那么将使用自己的 server _ check _ url 代替区域[ general ]中的 server _ check _ url.
#
# Quantumult 使用 HTTP HEAD 方法对测试网址 server_check_url 进行网页响应性测试（测试结果为通过该节点访问此网页获得 HTTP 响应所需要的时间），来确认节点的可用性。
# Quantumult 界面中的延迟测试方式均为网页响应性测试，显示的最终延迟均为通过对应节点访问测试网页获得 HTTP 响应所需要时间。
# 由于 Trojan 协议为无响应校验协议，使得 HTTP 检测方式即使获得了 HTTP 响应，也不代表节点一定可用。
#
# Dns _ exclusion _ 列表包含禁用占位符 IP (198.18)的域。*) ，未在 dns _ exclusion _ list 中的域都启用了占位符 IP，并打开了远程解析设置。
#
# Udp_whitelist 包含目标 UDP 端口，空表示所有端口都在 udp_whitelist 中。UDP 包(通过 Quantumult 隧道接口)的目标端口不在 udp_whitelist 中将被删除。此设置与策略无关，也与代理(服务器)端口无关。
#
# 被排除路线的交通将不会由 Quantumult 处理。最好在修改后重新启动设备。
# 资源解析器 url 示例可以在 https://raw.githubusercontent.com/crossutility/quantumult-x/master/resource-parser.js 中找到

[general]
profile_img_url=https://cdn.jsdelivr.net/gh/Koolson/Qure@master/IconSet/Color/Quantumult_X.png
resource_parser_url= https://cdn.jsdelivr.net/gh/KOP-XIAO/QuantumultX@master/Scripts/resource-parser.js
server_check_url=http://www.gstatic.com/generate_204
geo_location_checker=http://ip-api.com/json/?fields=18612031&lang=zh-CN,https://gitee.com/Sunert/Scripts/raw/master/Script/CheckIP.js
;running_mode_trigger=filter, filter, LINK_22E171:all_proxy, LINK_22E172:all_direct
dns_exclusion_list=*.cmpassport.com, *.jegotrip.com.cn, *.icitymobile.mobi, id6.me, *. pingan.com.cn, *.cmbchina.com
;ssid_suspended_list=LINK_22E174, LINK_22E175
;udp_whitelist=53, 123, 1900, 80-443
excluded_routes=192.168.0.0/16, 193.168.0.0/24, 10.0.0.0/8, 172.16.0.0/12, 100.64.0.0/10, 17.0.0.0/8
;icmp_auto_reply=true

#
# 从当前网络(系统)获取的 DNS 服务器将始终用于更好的性能(您可以使用“无系统”禁用此功能，但您至少应该添加一个定制的 DNS 服务器，如“ server = 223.5.5.5”)。
# 当没有设置 IPv6时，Quanumult x Tunnel 的 DNS 模块将直接让 AAAA 查询失败，但仍然允许来自 IPv6 DNS 服务器的 A 查询。
# 查询结果只用于评估过滤器或通过直接策略连接，当通过服务器连接时，结果将不被使用，Quantumult 将永远不知道相关域的目标 IP。
# 这里不允许直接为域设置127.0.0.1。如果您希望某个域(例如: example.com)为127.0.0.1，只需将“ host，example.com，reject”添加到“ filter _ local”部分。拒绝操作将返回带有127.0.0.1的 DNS 响应到查询。
#
[dns]
;no-system
no-ipv6
# 深圳移动运营商
server=120.196.165.24
server=223.5.5.5
server=114.114.114.114
server=119.29.29.29
server=8.8.8.8
;server=8.8.4.4:53
;server=/example0.com/system
;server=/example1.com/8.8.4.4
;server=/*.example2.com/223.5.5.5
;server=/example4.com/[2001:4860:4860::8888]:53
;address=/example5.com/192.168.16.18
;address=/example6.com/[2001:8d3:8d3:8d3:8d3:8d3:8d3:8d3]

#
# static policy 静态策略指向您手动选择的候选服务器。
# available policy 基于 server _ check _ url 的候选服务器中的第一个可用服务器的可用策略点(当策略被触发且策略结果不可用时，将立即启动并发 url 延迟测试。如果当时没有网络请求接受策略，这意味着策略处于空闲状态，即使服务器关闭，测试也不会启动。那时，您可以通过手动启动测试来更新服务器状态，但是这没有任何意义)。
# round-robin policy 循环策略指向候选服务器的下一个连接。
# url-latency-benchmark policy Url-latency-benchmark 策略指向具有最佳结果的服务器(将考虑 param 容忍度 ms)。当用户在 Quantumult x 容器应用程序中手动启动 url 测试时，策略结果也将被更新。此类型策略有一个称为 check-interval (秒)的参数，如果此策略已被任何请求激活，则将考虑间隔。
# ssid policy Ssid 策略根据网络环境指向服务器。
# Param resource-tag-regex 和 server-tag-regex 仅适用于静态、可用和循环类型的策略。
#
[policy]

;static=policy-name-1, Sample-A, Sample-B, Sample-C, img-url=http://example.com/icon.png
;available=policy-name-2, Sample-A, Sample-B, Sample-C
;round-robin=policy-name-3, Sample-A, Sample-B, Sample-C
;ssid=policy-name-4, Sample-A, Sample-B, LINK_22E171:Sample-B, LINK_22E172:Sample-C
;static=policy-name-5, resource-tag-regex=^sample, server-tag-regex=^example, img-url=http://example.com/icon.png
;available=policy-name-6, resource-tag-regex=^sample, server-tag-regex=^example
;round-robin=policy-name-7, resource-tag-regex=^sample, server-tag-regex=^example
;url-latency-benchmark=policy-name-8, resource-tag-regex=^sample, server-tag-regex=^example, check-interval=600, tolerance=0
static=中国网站, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/China_Map.png

static=国内媒体, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/DomesticMedia.png

static=Apple, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Apple.png

static=全球服务, proxy, reject,  img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Global.png

static=全球媒体, proxy, reject, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/ForeignMedia.png

static=YouTube, proxy, direct, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/YouTube_Letter.png

static=Netflix, proxy, direct, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Netflix_Letter.png

static=Spotify, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Spotify.png

static=Telegram, proxy, direct, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Telegram.png

static=TikTok, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/TikTok.png

static=网易云音乐, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Netease_Music_Unlock.png
  
static=广告拦截, direct, reject, img-url= https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/AdBlack.png

static=网络测速, direct, proxy, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Speedtest.png

static=最后, direct, proxy, reject, img-url=https://gitee.com/Sunert/ProxyConfig/raw/master/QuantumultX/Rules/Images/Qure/IconSet/Final.png

#
# 参数“ tag”和“ enabled”是可选的。
# 所有类型的远程资源的默认同步间隔为86400秒。
# 你可以设置 update-interval = 172800来自定义你的自动同步间隔(秒) ，负数意味着禁用自动同步。
#
[server_remote]
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.txt, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.txt, opt-parser=true, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server.txt, update-interval=-1, tag=Sample-01
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/server-complete.txt, tag=Sample-02, as-policy=static, img-url=http://example.com/icon.png, enabled=false
# 如需自建节点请再配置片段内添加节点，保存名称为server.text(名称和下面一致即可)
server.text, tag=自配节点, update-interval=86400, opt-parser=false, enabled=true

#
# 参数 "tag", "force-policy" and "enabled" 是可选的。
# 当存在强制策略时，将忽略远程资源过滤器中的策略，使用强制策略。
#
[filter_remote]

filter.text, tag=我的规则, update-interval=86400, opt-parser=false, enabled=false

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Extra/Apple/Apple.list, tag=Apple, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Extra/Apple/AppStore.list, tag=AppStore(默认代理), update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Extra/Apple/BlockiOSUpdate.list, tag=屏蔽系统升级, update-interval=86400, opt-parser=false, enabled=false

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Extra/Telegram/Telegram.list, tag=Telegram, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Unbreak.list, tag=后续修正, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/StreamingMedia/StreamingSE.list, tag=中国流媒体, force-policy=国内媒体, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/StreamingMedia/Streaming.list, tag=国际流媒体, force-policy=全球媒体, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Global.list, tag=国际网站(默认代理), force-policy=全球服务, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/China.list, tag=国内网站(默认直连), force-policy=中国网站, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Guard/Hijacking.list, tag=运营商劫持, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Guard/Privacy.list, tag=隐私, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Guard/Advertising.list, tag=神机去广告规则, update-interval=-1, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/NobyDa/Script@master/QuantumultX/AdRuleTest.list, tag=野比去广告, update-interval=-1, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Filter/Extra/ChinaIP.list, tag=中国IP, update-interval=86400, opt-parser=false, enabled=false

#
# Params "tag" and "enabled" are optional.
#
[rewrite_remote]
rewrite.text, tag=自建重写, update-interval=86400, opt-parser=false, enabled=false

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Rewrite/General.conf, tag=常规重写, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Rewrite/Block/YouTubeAds.conf, tag=Youtube去广告, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Rewrite/Block/Advertising.conf, tag=神机去广告, update-interval=-1, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/DivineEngine/Profiles@master/Quantumult/Rewrite/Block/AdvertisingPlus.conf, tag=去广告Plus, update-interval=86400, opt-parser=false, enabled=true

https://cdn.jsdelivr.net/gh/NobyDa/Script@master/QuantumultX/Js.conf, tag=NobyDa复写, update-interval=-1, opt-parser=false, enabled=true

https://gitee.com/chavyleung/scripts/raw/master/box/rewrite/boxjs.rewrite.quanx.tf.conf, tag=ChavyBoxjs, update-interval=-1, opt-parser=false, enabled=true

#
# 只有 obfs = http，obfs = ws，obfs = wss 可以有可选的“ obfs-uri”字段。
# Wss 中的 obfs-host 参数将用于 TLS 握手和 HTTP 头主机字段，如果没有为 wss 设置 obfs-host，则将使用服务器地址。
# 目前不支持 VMess 和 Trojan 的 UDP 中继。
# 当使用 obfs = ws 和 obfs = wss 时，服务器端可以通过带有 mux = 0的 v2ray-plugin 或者 v2ray-core 进行部署。
# 插件 1.2 ticket auth 比1.2 ticket fastauth 和 obfs tls 多一个 RTT，你最好使用 tl1.2 ticket fastauth。
# 方法 chacha20-ietf-poly1305和 chacha20-poly1305在 VMess 配置中具有相同的效果。
#
[server_local]
# 如需自建节点请再配置片段内添加节点，保存名称为server.text(名称和[server_remote]一致即可)

# 可选字段 tls13 在 shadowsocks 中仅用于 shadowsocks obfs = wss
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, server_check_url=http://www.apple.com/generate_204, tag=ss-01
;shadowsocks=example.com:80, method=chacha20, password=pwd, obfs=http, obfs-host=bing.com, obfs-uri=/resource/file, fast-open=false, udp-relay=false, tag=ss-02
;shadowsocks=example.com:443, method=chacha20, password=pwd, obfs=tls, obfs-host=bing.com, fast-open=false, udp-relay=false, tag=ss-03
;shadowsocks=example.com:443, method=chacha20, password=pwd, ssr-protocol=auth_chain_b, ssr-protocol-param=def, obfs=tls1.2_ticket_fastauth, obfs-host=bing.com, tag=ssr
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, fast-open=false, udp-relay=false, tag=ss-ws-01
;shadowsocks=example.com:80, method=aes-128-gcm, password=pwd, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-02
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=ss-ws-tls-01
;shadowsocks=example.com:443, method=aes-128-gcm, password=pwd, obfs=wss, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=ss-ws-tls-02
#
# 可选字段 tls13在 vmess 中只适用于obfs = over-tls 和 obfs = wss
;vmess=example.com:80, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-01
;vmess=example.com:80, method=aes-128-gcm, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, fast-open=false, udp-relay=false, tag=vmess-02
;vmess=example.com:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, fast-open=false, udp-relay=false, tag=vmess-tls-01
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, fast-open=false, udp-relay=false, tag=vmess-tls-02
;vmess=192.168.1.1:443, method=none, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=over-tls, obfs-host=example.com, tls13=true, fast-open=false, udp-relay=false, tag=vmess-tls-03
;vmess=example.com:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-01
;vmess=192.168.1.1:80, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=ws, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-02
;vmess=example.com:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-01
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, fast-open=false, udp-relay=false, tag=vmess-ws-tls-02
;vmess=192.168.1.1:443, method=chacha20-poly1305, password=23ad6b10-8d1a-40f7-8ad0-e3e35cd32291, obfs=wss, obfs-host=example.com, obfs-uri=/ws, tls13=true, fast-open=false, udp-relay=false, tag=vmess-ws-tls-03
#
# 可选字段 tls13在 http 中只适用于 over-tls = true
;http=example.com:80,fast-open=false, udp-relay=false, tag=http-01
;http=example.com:80, username=name, password=pwd, fast-open=false, udp-relay=false, tag=http-02
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=http-tls-01
;http=example.com:443, username=name, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=http-tls-02
# 可选字段 tls13在 trojan 中只适用于 over-tls = true
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-01
;trojan=example.com:443, password=pwd, over-tls=true, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-02
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, fast-open=false, udp-relay=false, tag=trojan-tls-03
;trojan=192.168.1.1:443, password=pwd, over-tls=true, tls-host=example.com, tls-verification=true, tls13=true, fast-open=false, udp-relay=false, tag=trojan-tls-04

[filter_local]
;user-agent, ?abc*, proxy
;host, www.google.com, proxy
;host-keyword, adsite, reject
;host-suffix, googleapis.com, proxy
;ip6-cidr, 2001:4860:4860::8888/32, direct
ip-cidr, 10.0.0.0/8, direct
ip-cidr, 127.0.0.0/8, direct
ip-cidr, 172.16.0.0/12, direct
ip-cidr, 192.168.0.0/16, direct
ip-cidr, 224.0.0.0/24, direct
geoip, cn, direct
final, 最后
#
# "reject" 返回没有内容的 HTTP状态码404。
# The "reject-200" 返回 HTTP状态码200，但没有内容。
# The "reject-img" 返回 HTTP状态码200，内容为1px gif。
# The "reject-dict" 返回空 json 对象内容的 HTTP状态码200。
# The "reject-array" 返回空 json 数组内容的 HTTP状态码200。
# The "request-header" 适用于所有的 http 头，而不仅仅是一个头，所以您可以匹配两个或多个头，包括 CRLF 在一个正则表达式。
# The "echo-response" 只需回复匹配 URL 的内容类型响应的正文，正文文件应该保存在“ On My iPhone-Quantumult x-Data”中。
# 如果“ rewrite”与主体相关，那么相关的 HTTP 头字段的长度和编码将由 Quantumult 自动处理，因此您不应该自己处理它们。对于 response-body 和 script-response-body，支持的最大解压缩响应体大小为2 * 1024kB (iOS 14 +)。
# 如果主体为空，则不会执行与主体相关的重写。
# 在 rewrite 中使用 javascript 时，可以使用这些对象: $request、 $response、 $notify (title、 subtitle、 message)、 console.log (message)和 Quantumult 的内置对象都有前缀“ $”。
# 支持: $request.scheme, $request.method, $request.url, $request.path, $request.headers, $response.statusCode, $response.headers, $response.body
# The $notify(title, subtitle, message) 如果 Quantumult 通知已经启用，将发布 iOS 通知。
# The $prefs is 对于持久性存储: $prefs.valueForKey(key), $prefs.setValueForKey(value, key), $prefs.removeValueForKey(key), $prefs.removeAllValues().
# The console.log(message)  将日志输出到 Quantumult 日志文件。
# The setTimeout(function() { }, interval) 将函数运行后间隔 interval(ms).
# 脚本可用 script-request-header, script-request-body, script-response-header, script-response-body, script-echo-response 和 script-analyze-echo-response 应该保存在本地“ On My iPhone-Quantumult x-Scripts”或“ iCloud Drive-Quantumult x-Scripts”中。样本可以在 https://github.com/crossutility/quantumult-x 中心找到
# Script-analyze-echo-response 和 script-echo-response 的区别在于前者将等待请求主体。
#
[rewrite_local]

;^http://example\.com/resource1/1/ url reject
;^http://example\.com/resource1/2/ url reject-img
;^http://example\.com/resource1/3/ url reject-200
;^http://example\.com/resource1/4/ url reject-dict
;^http://example\.com/resource1/5/ url reject-array
;^http://example\.com/resource2/ url 302 http://example.com/new-resource2/
;^http://example\.com/resource3/ url 307 http://example.com/new-resource3/
;^http://example\.com/resource4/ url request-header ^GET /resource4/ HTTP/1\.1(\r\n) request-header GET /api/ HTTP/1.1$1
;^http://example\.com/resource4/ url request-header (\r\n)User-Agent:.+(\r\n) request-header $1User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36$2
;^http://example\.com/resource5/ url request-body "info":\[.+\],"others" request-body "info":[],"others"
;^http://example\.com/resource5/ url response-body "info":\[.+\],"others" response-body "info":[],"others"
;^http://example\.com/resource5/ url echo-response text/html echo-response index.html
;^http://example\.com/resource6/ url script-response-body response-body.js
;^http://example\.com/resource7/ url script-echo-response script-echo.js
;^http://example\.com/resource8/ url script-response-header response-header.js
;^http://example\.com/resource9/ url script-request-header request-header.js
;^http://example\.com/resource10/ url script-request-body request-body.js

#
# The $task.fetch()编写一个 HTTP 请求并处理响应，只支持文本正文。如果您希望串行请求而不是当前请求，那么可以将 $task.fetch ()嵌入到另一个 $task.fetch ()的完成处理程序中。
# 脚本应该保存在本地“ On My iPhone-Quantumult x-Scripts”或“ iCloud Drive-Quantumult x-Scripts”中。样本可以在 https://github.com/crossutility/quantumult-x/blob/master/sample-task.js 中心找到
#  HTTP 请求超时默认10秒
#
# 支持5或6个 cron 字段，不包括命令字段。
#
[task_local]
;* * * * * sample-task.js
;* * * * * sample-task2.js, img-url=https://raw.githubusercontent.com/crossutility/Quantumult-X/master/quantumult-x.png, tag=Sample, enabled=true

#
# 部署本地 HTTP 服务器并使用 JavaScript 进行数据处理。
# 输入变量是 $reqeust.url, $reqeust.path, $reqeust.headers, $reqeust.body
# 使用 $done ({ status: “ HTTP/1.1200 OK”}、 headers: {}、 body: “ here is a string”) 输出 $done ({ status: “ HTTP/1.1200 OK”} ，以返回响应。
# 此外，还可以使用签名或任何其他验证方法来验证请求是否合法。
# 在部署完成后，你应该通过 http://127.0.0.1:9999/your-path/your-api/地图访问它。
#
[http_backend]
# 重写Boxjs和 http_backend 二选一 本模块访问地址为http://127.0.0.1:9999/
https://gitee.com/chavyleung/scripts/raw/master/box/chavy.boxjs.js, tag=Boxjs, path=^/, enabled=false
;https://raw.githubusercontent.com/crossutility/Quantumult-X/master/sample-backend.js, tag=fileConverter, path=^/example/v1/
;preference.js, tag=userPreference, path=^/preference/v1/, img-url=https://example.com, enabled=true
;convert.js, tag=fileConverter, path=^/convert/v1/


#
# 只有“主机名”中的 tlssini 或目标地址将由 MitM 处理。
#
# 默认情况下，当 MitM 启用 HTTPS 请求时，Quantumult x 从原始站点获取证书(证书将被缓存) ，保留大部分需要的原始证书信息，并使用 MitM root CA 重新签名，这是创建 MitM 证书的推荐(且更兼容)方式。
# 有时候，一些用户喜欢调试 HTTPS 请求，因为它的域不存在，所以原始证书甚至不存在。这时会出现 param simple _ cert _ hostname。简单 _ cert _ hostname (和主机名)中带有 TLS SNI 名称的 HTTPS 请求将使用纯本地生成的 MitM 证书。
#
# 重要的! ! ! 你应该永远保持你的 CA 密码和 p12私有化。
#
[mitm]
;passphrase =
;p12 =
;skip_validating_cert = false
;force_sni_domain_name = false
;hostname = *.example.com, *.sample.com, non-existed-domain.com, *.non-connected-domain.com
;simple_cert_hostname = non-existed-domain.com, *.non-connected-domain.com

